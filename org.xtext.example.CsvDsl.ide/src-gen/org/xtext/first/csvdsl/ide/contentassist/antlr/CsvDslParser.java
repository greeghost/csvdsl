/*
 * generated by Xtext 2.28.0
 */
package org.xtext.first.csvdsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.first.csvdsl.ide.contentassist.antlr.internal.InternalCsvDslParser;
import org.xtext.first.csvdsl.services.CsvDslGrammarAccess;

public class CsvDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CsvDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CsvDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getCsvOperationAccess().getAlternatives(), "rule__CsvOperation__Alternatives");
			builder.put(grammarAccess.getIntOperationAccess().getAlternatives(), "rule__IntOperation__Alternatives");
			builder.put(grammarAccess.getAssignAccess().getAlternatives(), "rule__Assign__Alternatives");
			builder.put(grammarAccess.getPrintAccess().getValAlternatives_2_0(), "rule__Print__ValAlternatives_2_0");
			builder.put(grammarAccess.getRangeAccess().getAlternatives(), "rule__Range__Alternatives");
			builder.put(grammarAccess.getRowRangeAccess().getAlternatives(), "rule__RowRange__Alternatives");
			builder.put(grammarAccess.getColRangeAccess().getAlternatives(), "rule__ColRange__Alternatives");
			builder.put(grammarAccess.getAssignAccess().getGroup_0(), "rule__Assign__Group_0__0");
			builder.put(grammarAccess.getAssignAccess().getGroup_1(), "rule__Assign__Group_1__0");
			builder.put(grammarAccess.getSaveAccess().getGroup(), "rule__Save__Group__0");
			builder.put(grammarAccess.getPrintAccess().getGroup(), "rule__Print__Group__0");
			builder.put(grammarAccess.getLoadAccess().getGroup(), "rule__Load__Group__0");
			builder.put(grammarAccess.getSumAccess().getGroup(), "rule__Sum__Group__0");
			builder.put(grammarAccess.getProductAccess().getGroup(), "rule__Product__Group__0");
			builder.put(grammarAccess.getSelectAccess().getGroup(), "rule__Select__Group__0");
			builder.put(grammarAccess.getDropAccess().getGroup(), "rule__Drop__Group__0");
			builder.put(grammarAccess.getRowRangeAccess().getGroup_0(), "rule__RowRange__Group_0__0");
			builder.put(grammarAccess.getRowRangeAccess().getGroup_1(), "rule__RowRange__Group_1__0");
			builder.put(grammarAccess.getColRangeAccess().getGroup_0(), "rule__ColRange__Group_0__0");
			builder.put(grammarAccess.getColRangeAccess().getGroup_1(), "rule__ColRange__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getStatementAssignment(), "rule__Model__StatementAssignment");
			builder.put(grammarAccess.getAssignAccess().getValAssignment_0_0(), "rule__Assign__ValAssignment_0_0");
			builder.put(grammarAccess.getAssignAccess().getOpAssignment_0_2(), "rule__Assign__OpAssignment_0_2");
			builder.put(grammarAccess.getAssignAccess().getVarAssignment_1_0(), "rule__Assign__VarAssignment_1_0");
			builder.put(grammarAccess.getAssignAccess().getOpAssignment_1_2(), "rule__Assign__OpAssignment_1_2");
			builder.put(grammarAccess.getSaveAccess().getDeclared_csvAssignment_2(), "rule__Save__Declared_csvAssignment_2");
			builder.put(grammarAccess.getSaveAccess().getFilenameAssignment_4(), "rule__Save__FilenameAssignment_4");
			builder.put(grammarAccess.getPrintAccess().getValAssignment_2(), "rule__Print__ValAssignment_2");
			builder.put(grammarAccess.getLoadAccess().getFilenameAssignment_2(), "rule__Load__FilenameAssignment_2");
			builder.put(grammarAccess.getSumAccess().getVarAssignment_0(), "rule__Sum__VarAssignment_0");
			builder.put(grammarAccess.getSumAccess().getSelectionAssignment_4(), "rule__Sum__SelectionAssignment_4");
			builder.put(grammarAccess.getProductAccess().getVarAssignment_0(), "rule__Product__VarAssignment_0");
			builder.put(grammarAccess.getProductAccess().getSelectionAssignment_4(), "rule__Product__SelectionAssignment_4");
			builder.put(grammarAccess.getDirectAccess().getValAssignment(), "rule__Direct__ValAssignment");
			builder.put(grammarAccess.getSelectAccess().getNewCsvAssignment_0(), "rule__Select__NewCsvAssignment_0");
			builder.put(grammarAccess.getSelectAccess().getCsv_varAssignment_2(), "rule__Select__Csv_varAssignment_2");
			builder.put(grammarAccess.getSelectAccess().getRangeAssignment_5(), "rule__Select__RangeAssignment_5");
			builder.put(grammarAccess.getDropAccess().getNewCsvAssignment_0(), "rule__Drop__NewCsvAssignment_0");
			builder.put(grammarAccess.getDropAccess().getCsv_varAssignment_2(), "rule__Drop__Csv_varAssignment_2");
			builder.put(grammarAccess.getDropAccess().getRangeAssignment_5(), "rule__Drop__RangeAssignment_5");
			builder.put(grammarAccess.getRowRangeAccess().getRowAssignment_0_1(), "rule__RowRange__RowAssignment_0_1");
			builder.put(grammarAccess.getRowRangeAccess().getRowStartAssignment_1_1(), "rule__RowRange__RowStartAssignment_1_1");
			builder.put(grammarAccess.getRowRangeAccess().getRowEndAssignment_1_3(), "rule__RowRange__RowEndAssignment_1_3");
			builder.put(grammarAccess.getColRangeAccess().getColumnAssignment_0_1(), "rule__ColRange__ColumnAssignment_0_1");
			builder.put(grammarAccess.getColRangeAccess().getColumnStartAssignment_1_1(), "rule__ColRange__ColumnStartAssignment_1_1");
			builder.put(grammarAccess.getColRangeAccess().getColumnEndAssignment_1_3(), "rule__ColRange__ColumnEndAssignment_1_3");
			builder.put(grammarAccess.getCsv_variableAccess().getNameAssignment(), "rule__Csv_variable__NameAssignment");
			builder.put(grammarAccess.getInt_variableAccess().getNameAssignment(), "rule__Int_variable__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CsvDslGrammarAccess grammarAccess;

	@Override
	protected InternalCsvDslParser createParser() {
		InternalCsvDslParser result = new InternalCsvDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CsvDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CsvDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
