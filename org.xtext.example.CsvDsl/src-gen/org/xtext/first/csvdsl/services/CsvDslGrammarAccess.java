/*
 * generated by Xtext 2.28.0
 */
package org.xtext.first.csvdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CsvDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.Model");
		private final Assignment cStatementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_0 = (RuleCall)cStatementAssignment.eContents().get(0);
		
		//Model:
		//    (statement+=Statement)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment() { return cStatementAssignment; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_0() { return cStatementStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSaveParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//    Assign |
		//    Print |
		//    Save
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Assign |
		//Print |
		//Save
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Assign
		public RuleCall getAssignParserRuleCall_0() { return cAssignParserRuleCall_0; }
		
		//Print
		public RuleCall getPrintParserRuleCall_1() { return cPrintParserRuleCall_1; }
		
		//Save
		public RuleCall getSaveParserRuleCall_2() { return cSaveParserRuleCall_2; }
	}
	public class CsvOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.CsvOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoadParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDropParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CsvOperation:
		//    Load | Select | Drop
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Load | Select | Drop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Load
		public RuleCall getLoadParserRuleCall_0() { return cLoadParserRuleCall_0; }
		
		//Select
		public RuleCall getSelectParserRuleCall_1() { return cSelectParserRuleCall_1; }
		
		//Drop
		public RuleCall getDropParserRuleCall_2() { return cDropParserRuleCall_2; }
	}
	public class IntOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.IntOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProductParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDirectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IntOperation:
		//    Sum | Product | Direct
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Sum | Product | Direct
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sum
		public RuleCall getSumParserRuleCall_0() { return cSumParserRuleCall_0; }
		
		//Product
		public RuleCall getProductParserRuleCall_1() { return cProductParserRuleCall_1; }
		
		//Direct
		public RuleCall getDirectParserRuleCall_2() { return cDirectParserRuleCall_2; }
	}
	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.Assign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cValAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cValCsv_variableParserRuleCall_0_0_0 = (RuleCall)cValAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOpAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOpCsvOperationParserRuleCall_0_2_0 = (RuleCall)cOpAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cVarAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVarInt_variableParserRuleCall_1_0_0 = (RuleCall)cVarAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOpIntOperationParserRuleCall_1_2_0 = (RuleCall)cOpAssignment_1_2.eContents().get(0);
		
		//Assign:
		//    val=Csv_variable "=" op=CsvOperation |
		//    var=Int_variable "=" op=IntOperation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//val=Csv_variable "=" op=CsvOperation |
		//var=Int_variable "=" op=IntOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//val=Csv_variable "=" op=CsvOperation
		public Group getGroup_0() { return cGroup_0; }
		
		//val=Csv_variable
		public Assignment getValAssignment_0_0() { return cValAssignment_0_0; }
		
		//Csv_variable
		public RuleCall getValCsv_variableParserRuleCall_0_0_0() { return cValCsv_variableParserRuleCall_0_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//op=CsvOperation
		public Assignment getOpAssignment_0_2() { return cOpAssignment_0_2; }
		
		//CsvOperation
		public RuleCall getOpCsvOperationParserRuleCall_0_2_0() { return cOpCsvOperationParserRuleCall_0_2_0; }
		
		//var=Int_variable "=" op=IntOperation
		public Group getGroup_1() { return cGroup_1; }
		
		//var=Int_variable
		public Assignment getVarAssignment_1_0() { return cVarAssignment_1_0; }
		
		//Int_variable
		public RuleCall getVarInt_variableParserRuleCall_1_0_0() { return cVarInt_variableParserRuleCall_1_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//op=IntOperation
		public Assignment getOpAssignment_1_2() { return cOpAssignment_1_2; }
		
		//IntOperation
		public RuleCall getOpIntOperationParserRuleCall_1_2_0() { return cOpIntOperationParserRuleCall_1_2_0; }
	}
	public class SaveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.Save");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSaveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclared_csvAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclared_csvCsv_variableParserRuleCall_2_0 = (RuleCall)cDeclared_csvAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFilenameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_4_0 = (RuleCall)cFilenameAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Save:
		//    'Save' '(' declared_csv=Csv_variable "," filename=STRING ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Save' '(' declared_csv=Csv_variable "," filename=STRING ")"
		public Group getGroup() { return cGroup; }
		
		//'Save'
		public Keyword getSaveKeyword_0() { return cSaveKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//declared_csv=Csv_variable
		public Assignment getDeclared_csvAssignment_2() { return cDeclared_csvAssignment_2; }
		
		//Csv_variable
		public RuleCall getDeclared_csvCsv_variableParserRuleCall_2_0() { return cDeclared_csvCsv_variableParserRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//filename=STRING
		public Assignment getFilenameAssignment_4() { return cFilenameAssignment_4; }
		
		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_4_0() { return cFilenameSTRINGTerminalRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValAlternatives_2_0 = (Alternatives)cValAssignment_2.eContents().get(0);
		private final RuleCall cValIntOperationParserRuleCall_2_0_0 = (RuleCall)cValAlternatives_2_0.eContents().get(0);
		private final RuleCall cValInt_variableParserRuleCall_2_0_1 = (RuleCall)cValAlternatives_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Print:
		//    'Print' '(' val=(IntOperation | Int_variable) ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Print' '(' val=(IntOperation | Int_variable) ')'
		public Group getGroup() { return cGroup; }
		
		//'Print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//val=(IntOperation | Int_variable)
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//(IntOperation | Int_variable)
		public Alternatives getValAlternatives_2_0() { return cValAlternatives_2_0; }
		
		//IntOperation
		public RuleCall getValIntOperationParserRuleCall_2_0_0() { return cValIntOperationParserRuleCall_2_0_0; }
		
		//Int_variable
		public RuleCall getValInt_variableParserRuleCall_2_0_1() { return cValInt_variableParserRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LoadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.Load");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFilenameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_2_0 = (RuleCall)cFilenameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Load:
		//    "Open" "(" filename=STRING ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"Open" "(" filename=STRING ")"
		public Group getGroup() { return cGroup; }
		
		//"Open"
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//filename=STRING
		public Assignment getFilenameAssignment_2() { return cFilenameAssignment_2; }
		
		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_2_0() { return cFilenameSTRINGTerminalRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarInt_variableParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSumKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSelectionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSelectionCsv_variableParserRuleCall_4_0 = (RuleCall)cSelectionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Sum:
		//    var=Int_variable '=' 'Sum' '(' selection=Csv_variable ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var=Int_variable '=' 'Sum' '(' selection=Csv_variable ')'
		public Group getGroup() { return cGroup; }
		
		//var=Int_variable
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Int_variable
		public RuleCall getVarInt_variableParserRuleCall_0_0() { return cVarInt_variableParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'Sum'
		public Keyword getSumKeyword_2() { return cSumKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//selection=Csv_variable
		public Assignment getSelectionAssignment_4() { return cSelectionAssignment_4; }
		
		//Csv_variable
		public RuleCall getSelectionCsv_variableParserRuleCall_4_0() { return cSelectionCsv_variableParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.Product");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarInt_variableParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cProductKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSelectionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSelectionCsv_variableParserRuleCall_4_0 = (RuleCall)cSelectionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Product:
		//    var=Int_variable '=' 'Product' '(' selection=Csv_variable ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var=Int_variable '=' 'Product' '(' selection=Csv_variable ')'
		public Group getGroup() { return cGroup; }
		
		//var=Int_variable
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Int_variable
		public RuleCall getVarInt_variableParserRuleCall_0_0() { return cVarInt_variableParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'Product'
		public Keyword getProductKeyword_2() { return cProductKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//selection=Csv_variable
		public Assignment getSelectionAssignment_4() { return cSelectionAssignment_4; }
		
		//Csv_variable
		public RuleCall getSelectionCsv_variableParserRuleCall_4_0() { return cSelectionCsv_variableParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DirectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.Direct");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//Direct:
		//    val=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNewCsvAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNewCsvCsv_variableParserRuleCall_0_0 = (RuleCall)cNewCsvAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCsv_varAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCsv_varCsv_variableParserRuleCall_2_0 = (RuleCall)cCsv_varAssignment_2.eContents().get(0);
		private final Keyword cSelectKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRangeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRangeRangeParserRuleCall_5_0 = (RuleCall)cRangeAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Select:
		//    newCsv=Csv_variable '=' csv_var=Csv_variable '.select' '(' range=Range ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//newCsv=Csv_variable '=' csv_var=Csv_variable '.select' '(' range=Range ')'
		public Group getGroup() { return cGroup; }
		
		//newCsv=Csv_variable
		public Assignment getNewCsvAssignment_0() { return cNewCsvAssignment_0; }
		
		//Csv_variable
		public RuleCall getNewCsvCsv_variableParserRuleCall_0_0() { return cNewCsvCsv_variableParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//csv_var=Csv_variable
		public Assignment getCsv_varAssignment_2() { return cCsv_varAssignment_2; }
		
		//Csv_variable
		public RuleCall getCsv_varCsv_variableParserRuleCall_2_0() { return cCsv_varCsv_variableParserRuleCall_2_0; }
		
		//'.select'
		public Keyword getSelectKeyword_3() { return cSelectKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//range=Range
		public Assignment getRangeAssignment_5() { return cRangeAssignment_5; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_5_0() { return cRangeRangeParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class DropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.Drop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNewCsvAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNewCsvCsv_variableParserRuleCall_0_0 = (RuleCall)cNewCsvAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCsv_varAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCsv_varCsv_variableParserRuleCall_2_0 = (RuleCall)cCsv_varAssignment_2.eContents().get(0);
		private final Keyword cDropKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRangeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRangeRangeParserRuleCall_5_0 = (RuleCall)cRangeAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Drop:
		//    newCsv=Csv_variable '=' csv_var=Csv_variable '.drop' '(' range=Range ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//newCsv=Csv_variable '=' csv_var=Csv_variable '.drop' '(' range=Range ')'
		public Group getGroup() { return cGroup; }
		
		//newCsv=Csv_variable
		public Assignment getNewCsvAssignment_0() { return cNewCsvAssignment_0; }
		
		//Csv_variable
		public RuleCall getNewCsvCsv_variableParserRuleCall_0_0() { return cNewCsvCsv_variableParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//csv_var=Csv_variable
		public Assignment getCsv_varAssignment_2() { return cCsv_varAssignment_2; }
		
		//Csv_variable
		public RuleCall getCsv_varCsv_variableParserRuleCall_2_0() { return cCsv_varCsv_variableParserRuleCall_2_0; }
		
		//'.drop'
		public Keyword getDropKeyword_3() { return cDropKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//range=Range
		public Assignment getRangeAssignment_5() { return cRangeAssignment_5; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_5_0() { return cRangeRangeParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.Range");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRowRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Range:
		//    RowRange |
		//    ColRange
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RowRange |
		//ColRange
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RowRange
		public RuleCall getRowRangeParserRuleCall_0() { return cRowRangeParserRuleCall_0; }
		
		//ColRange
		public RuleCall getColRangeParserRuleCall_1() { return cColRangeParserRuleCall_1; }
	}
	public class RowRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.RowRange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cRowKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cRowAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRowINTTerminalRuleCall_0_1_0 = (RuleCall)cRowAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRowsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRowStartAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRowStartINTTerminalRuleCall_1_1_0 = (RuleCall)cRowStartAssignment_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRowEndAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRowEndINTTerminalRuleCall_1_3_0 = (RuleCall)cRowEndAssignment_1_3.eContents().get(0);
		
		//RowRange:
		//    'Row:' row=INT |
		//    'Rows:' rowStart=INT '-' rowEnd=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Row:' row=INT |
		//'Rows:' rowStart=INT '-' rowEnd=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Row:' row=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//'Row:'
		public Keyword getRowKeyword_0_0() { return cRowKeyword_0_0; }
		
		//row=INT
		public Assignment getRowAssignment_0_1() { return cRowAssignment_0_1; }
		
		//INT
		public RuleCall getRowINTTerminalRuleCall_0_1_0() { return cRowINTTerminalRuleCall_0_1_0; }
		
		//'Rows:' rowStart=INT '-' rowEnd=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'Rows:'
		public Keyword getRowsKeyword_1_0() { return cRowsKeyword_1_0; }
		
		//rowStart=INT
		public Assignment getRowStartAssignment_1_1() { return cRowStartAssignment_1_1; }
		
		//INT
		public RuleCall getRowStartINTTerminalRuleCall_1_1_0() { return cRowStartINTTerminalRuleCall_1_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_2() { return cHyphenMinusKeyword_1_2; }
		
		//rowEnd=INT
		public Assignment getRowEndAssignment_1_3() { return cRowEndAssignment_1_3; }
		
		//INT
		public RuleCall getRowEndINTTerminalRuleCall_1_3_0() { return cRowEndINTTerminalRuleCall_1_3_0; }
	}
	public class ColRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.ColRange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cColumnKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cColumnAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cColumnINTTerminalRuleCall_0_1_0 = (RuleCall)cColumnAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cColumnsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cColumnStartAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cColumnStartINTTerminalRuleCall_1_1_0 = (RuleCall)cColumnStartAssignment_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cColumnEndAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cColumnEndINTTerminalRuleCall_1_3_0 = (RuleCall)cColumnEndAssignment_1_3.eContents().get(0);
		
		//ColRange:
		//    'Column:' column=INT |
		//    'Columns:' columnStart=INT '-' columnEnd=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Column:' column=INT |
		//'Columns:' columnStart=INT '-' columnEnd=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Column:' column=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//'Column:'
		public Keyword getColumnKeyword_0_0() { return cColumnKeyword_0_0; }
		
		//column=INT
		public Assignment getColumnAssignment_0_1() { return cColumnAssignment_0_1; }
		
		//INT
		public RuleCall getColumnINTTerminalRuleCall_0_1_0() { return cColumnINTTerminalRuleCall_0_1_0; }
		
		//'Columns:' columnStart=INT '-' columnEnd=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'Columns:'
		public Keyword getColumnsKeyword_1_0() { return cColumnsKeyword_1_0; }
		
		//columnStart=INT
		public Assignment getColumnStartAssignment_1_1() { return cColumnStartAssignment_1_1; }
		
		//INT
		public RuleCall getColumnStartINTTerminalRuleCall_1_1_0() { return cColumnStartINTTerminalRuleCall_1_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_2() { return cHyphenMinusKeyword_1_2; }
		
		//columnEnd=INT
		public Assignment getColumnEndAssignment_1_3() { return cColumnEndAssignment_1_3; }
		
		//INT
		public RuleCall getColumnEndINTTerminalRuleCall_1_3_0() { return cColumnEndINTTerminalRuleCall_1_3_0; }
	}
	public class Csv_variableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.Csv_variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Csv_variable:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class Int_variableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.first.csvdsl.CsvDsl.Int_variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Int_variable:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final StatementElements pStatement;
	private final CsvOperationElements pCsvOperation;
	private final IntOperationElements pIntOperation;
	private final AssignElements pAssign;
	private final SaveElements pSave;
	private final PrintElements pPrint;
	private final LoadElements pLoad;
	private final SumElements pSum;
	private final ProductElements pProduct;
	private final DirectElements pDirect;
	private final SelectElements pSelect;
	private final DropElements pDrop;
	private final RangeElements pRange;
	private final RowRangeElements pRowRange;
	private final ColRangeElements pColRange;
	private final Csv_variableElements pCsv_variable;
	private final Int_variableElements pInt_variable;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CsvDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStatement = new StatementElements();
		this.pCsvOperation = new CsvOperationElements();
		this.pIntOperation = new IntOperationElements();
		this.pAssign = new AssignElements();
		this.pSave = new SaveElements();
		this.pPrint = new PrintElements();
		this.pLoad = new LoadElements();
		this.pSum = new SumElements();
		this.pProduct = new ProductElements();
		this.pDirect = new DirectElements();
		this.pSelect = new SelectElements();
		this.pDrop = new DropElements();
		this.pRange = new RangeElements();
		this.pRowRange = new RowRangeElements();
		this.pColRange = new ColRangeElements();
		this.pCsv_variable = new Csv_variableElements();
		this.pInt_variable = new Int_variableElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.first.csvdsl.CsvDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    (statement+=Statement)*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Statement:
	//    Assign |
	//    Print |
	//    Save
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//CsvOperation:
	//    Load | Select | Drop
	//;
	public CsvOperationElements getCsvOperationAccess() {
		return pCsvOperation;
	}
	
	public ParserRule getCsvOperationRule() {
		return getCsvOperationAccess().getRule();
	}
	
	//IntOperation:
	//    Sum | Product | Direct
	//;
	public IntOperationElements getIntOperationAccess() {
		return pIntOperation;
	}
	
	public ParserRule getIntOperationRule() {
		return getIntOperationAccess().getRule();
	}
	
	//Assign:
	//    val=Csv_variable "=" op=CsvOperation |
	//    var=Int_variable "=" op=IntOperation
	//;
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}
	
	//Save:
	//    'Save' '(' declared_csv=Csv_variable "," filename=STRING ")"
	//;
	public SaveElements getSaveAccess() {
		return pSave;
	}
	
	public ParserRule getSaveRule() {
		return getSaveAccess().getRule();
	}
	
	//Print:
	//    'Print' '(' val=(IntOperation | Int_variable) ')'
	//;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//Load:
	//    "Open" "(" filename=STRING ")"
	//;
	public LoadElements getLoadAccess() {
		return pLoad;
	}
	
	public ParserRule getLoadRule() {
		return getLoadAccess().getRule();
	}
	
	//Sum:
	//    var=Int_variable '=' 'Sum' '(' selection=Csv_variable ')'
	//;
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	//Product:
	//    var=Int_variable '=' 'Product' '(' selection=Csv_variable ')'
	//;
	public ProductElements getProductAccess() {
		return pProduct;
	}
	
	public ParserRule getProductRule() {
		return getProductAccess().getRule();
	}
	
	//Direct:
	//    val=INT
	//;
	public DirectElements getDirectAccess() {
		return pDirect;
	}
	
	public ParserRule getDirectRule() {
		return getDirectAccess().getRule();
	}
	
	//Select:
	//    newCsv=Csv_variable '=' csv_var=Csv_variable '.select' '(' range=Range ')'
	//;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//Drop:
	//    newCsv=Csv_variable '=' csv_var=Csv_variable '.drop' '(' range=Range ')'
	//;
	public DropElements getDropAccess() {
		return pDrop;
	}
	
	public ParserRule getDropRule() {
		return getDropAccess().getRule();
	}
	
	//Range:
	//    RowRange |
	//    ColRange
	//;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//RowRange:
	//    'Row:' row=INT |
	//    'Rows:' rowStart=INT '-' rowEnd=INT
	//;
	public RowRangeElements getRowRangeAccess() {
		return pRowRange;
	}
	
	public ParserRule getRowRangeRule() {
		return getRowRangeAccess().getRule();
	}
	
	//ColRange:
	//    'Column:' column=INT |
	//    'Columns:' columnStart=INT '-' columnEnd=INT
	//;
	public ColRangeElements getColRangeAccess() {
		return pColRange;
	}
	
	public ParserRule getColRangeRule() {
		return getColRangeAccess().getRule();
	}
	
	//Csv_variable:
	//    name=ID
	//;
	public Csv_variableElements getCsv_variableAccess() {
		return pCsv_variable;
	}
	
	public ParserRule getCsv_variableRule() {
		return getCsv_variableAccess().getRule();
	}
	
	//Int_variable:
	//    name=ID
	//;
	public Int_variableElements getInt_variableAccess() {
		return pInt_variable;
	}
	
	public ParserRule getInt_variableRule() {
		return getInt_variableAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
