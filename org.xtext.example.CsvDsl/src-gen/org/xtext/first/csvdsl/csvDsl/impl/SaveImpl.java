/**
 * generated by Xtext 2.28.0
 */
package org.xtext.first.csvdsl.csvDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.first.csvdsl.csvDsl.CsvDslPackage;
import org.xtext.first.csvdsl.csvDsl.Csv_variable;
import org.xtext.first.csvdsl.csvDsl.Save;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Save</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.first.csvdsl.csvDsl.impl.SaveImpl#getDeclared_csv <em>Declared csv</em>}</li>
 *   <li>{@link org.xtext.first.csvdsl.csvDsl.impl.SaveImpl#getFilename <em>Filename</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SaveImpl extends StatementImpl implements Save
{
  /**
   * The cached value of the '{@link #getDeclared_csv() <em>Declared csv</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclared_csv()
   * @generated
   * @ordered
   */
  protected Csv_variable declared_csv;

  /**
   * The default value of the '{@link #getFilename() <em>Filename</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFilename()
   * @generated
   * @ordered
   */
  protected static final String FILENAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFilename() <em>Filename</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFilename()
   * @generated
   * @ordered
   */
  protected String filename = FILENAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SaveImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CsvDslPackage.Literals.SAVE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Csv_variable getDeclared_csv()
  {
    return declared_csv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeclared_csv(Csv_variable newDeclared_csv, NotificationChain msgs)
  {
    Csv_variable oldDeclared_csv = declared_csv;
    declared_csv = newDeclared_csv;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CsvDslPackage.SAVE__DECLARED_CSV, oldDeclared_csv, newDeclared_csv);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDeclared_csv(Csv_variable newDeclared_csv)
  {
    if (newDeclared_csv != declared_csv)
    {
      NotificationChain msgs = null;
      if (declared_csv != null)
        msgs = ((InternalEObject)declared_csv).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CsvDslPackage.SAVE__DECLARED_CSV, null, msgs);
      if (newDeclared_csv != null)
        msgs = ((InternalEObject)newDeclared_csv).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CsvDslPackage.SAVE__DECLARED_CSV, null, msgs);
      msgs = basicSetDeclared_csv(newDeclared_csv, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsvDslPackage.SAVE__DECLARED_CSV, newDeclared_csv, newDeclared_csv));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFilename()
  {
    return filename;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFilename(String newFilename)
  {
    String oldFilename = filename;
    filename = newFilename;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CsvDslPackage.SAVE__FILENAME, oldFilename, filename));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CsvDslPackage.SAVE__DECLARED_CSV:
        return basicSetDeclared_csv(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CsvDslPackage.SAVE__DECLARED_CSV:
        return getDeclared_csv();
      case CsvDslPackage.SAVE__FILENAME:
        return getFilename();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CsvDslPackage.SAVE__DECLARED_CSV:
        setDeclared_csv((Csv_variable)newValue);
        return;
      case CsvDslPackage.SAVE__FILENAME:
        setFilename((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CsvDslPackage.SAVE__DECLARED_CSV:
        setDeclared_csv((Csv_variable)null);
        return;
      case CsvDslPackage.SAVE__FILENAME:
        setFilename(FILENAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CsvDslPackage.SAVE__DECLARED_CSV:
        return declared_csv != null;
      case CsvDslPackage.SAVE__FILENAME:
        return FILENAME_EDEFAULT == null ? filename != null : !FILENAME_EDEFAULT.equals(filename);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (filename: ");
    result.append(filename);
    result.append(')');
    return result.toString();
  }

} //SaveImpl
