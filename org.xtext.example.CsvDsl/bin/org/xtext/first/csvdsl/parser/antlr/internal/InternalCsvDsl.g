/*
 * generated by Xtext 2.28.0
 */
grammar InternalCsvDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.first.csvdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.first.csvdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.first.csvdsl.services.CsvDslGrammarAccess;

}

@parser::members {

 	private CsvDslGrammarAccess grammarAccess;

    public InternalCsvDslParser(TokenStream input, CsvDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected CsvDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getStatementStatementParserRuleCall_0());
			}
			lv_statement_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"statement",
					lv_statement_0_0,
					"org.xtext.first.csvdsl.CsvDsl.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAssignParserRuleCall_0());
		}
		this_Assign_0=ruleAssign
		{
			$current = $this_Assign_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getPrintParserRuleCall_1());
		}
		this_Print_1=rulePrint
		{
			$current = $this_Print_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSaveParserRuleCall_2());
		}
		this_Save_2=ruleSave
		{
			$current = $this_Save_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCsvOperation
entryRuleCsvOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCsvOperationRule()); }
	iv_ruleCsvOperation=ruleCsvOperation
	{ $current=$iv_ruleCsvOperation.current; }
	EOF;

// Rule CsvOperation
ruleCsvOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCsvOperationAccess().getLoadParserRuleCall_0());
		}
		this_Load_0=ruleLoad
		{
			$current = $this_Load_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCsvOperationAccess().getSelectParserRuleCall_1());
		}
		this_Select_1=ruleSelect
		{
			$current = $this_Select_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCsvOperationAccess().getDropParserRuleCall_2());
		}
		this_Drop_2=ruleDrop
		{
			$current = $this_Drop_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntOperation
entryRuleIntOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntOperationRule()); }
	iv_ruleIntOperation=ruleIntOperation
	{ $current=$iv_ruleIntOperation.current; }
	EOF;

// Rule IntOperation
ruleIntOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIntOperationAccess().getSumParserRuleCall_0());
		}
		this_Sum_0=ruleSum
		{
			$current = $this_Sum_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIntOperationAccess().getProductParserRuleCall_1());
		}
		this_Product_1=ruleProduct
		{
			$current = $this_Product_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIntOperationAccess().getDirectParserRuleCall_2());
		}
		this_Direct_2=ruleDirect
		{
			$current = $this_Direct_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAssign
entryRuleAssign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignRule()); }
	iv_ruleAssign=ruleAssign
	{ $current=$iv_ruleAssign.current; }
	EOF;

// Rule Assign
ruleAssign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignAccess().getValCsv_variableParserRuleCall_0_0_0());
					}
					lv_val_0_0=ruleCsv_variable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignRule());
						}
						set(
							$current,
							"val",
							lv_val_0_0,
							"org.xtext.first.csvdsl.CsvDsl.Csv_variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getAssignAccess().getEqualsSignKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignAccess().getOpCsvOperationParserRuleCall_0_2_0());
					}
					lv_op_2_0=ruleCsvOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"org.xtext.first.csvdsl.CsvDsl.CsvOperation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignAccess().getVarInt_variableParserRuleCall_1_0_0());
					}
					lv_var_3_0=ruleInt_variable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignRule());
						}
						set(
							$current,
							"var",
							lv_var_3_0,
							"org.xtext.first.csvdsl.CsvDsl.Int_variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getAssignAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignAccess().getOpIntOperationParserRuleCall_1_2_0());
					}
					lv_op_5_0=ruleIntOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignRule());
						}
						set(
							$current,
							"op",
							lv_op_5_0,
							"org.xtext.first.csvdsl.CsvDsl.IntOperation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSave
entryRuleSave returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSaveRule()); }
	iv_ruleSave=ruleSave
	{ $current=$iv_ruleSave.current; }
	EOF;

// Rule Save
ruleSave returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Save'
		{
			newLeafNode(otherlv_0, grammarAccess.getSaveAccess().getSaveKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSaveAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSaveAccess().getDeclared_csvCsv_variableParserRuleCall_2_0());
				}
				lv_declared_csv_2_0=ruleCsv_variable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSaveRule());
					}
					set(
						$current,
						"declared_csv",
						lv_declared_csv_2_0,
						"org.xtext.first.csvdsl.CsvDsl.Csv_variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getSaveAccess().getCommaKeyword_3());
		}
		(
			(
				lv_filename_4_0=RULE_STRING
				{
					newLeafNode(lv_filename_4_0, grammarAccess.getSaveAccess().getFilenameSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSaveRule());
					}
					setWithLastConsumed(
						$current,
						"filename",
						lv_filename_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSaveAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRulePrint
entryRulePrint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintRule()); }
	iv_rulePrint=rulePrint
	{ $current=$iv_rulePrint.current; }
	EOF;

// Rule Print
rulePrint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Print'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintAccess().getPrintKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPrintAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPrintAccess().getValIntOperationParserRuleCall_2_0_0());
					}
					lv_val_2_1=ruleIntOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrintRule());
						}
						set(
							$current,
							"val",
							lv_val_2_1,
							"org.xtext.first.csvdsl.CsvDsl.IntOperation");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPrintAccess().getValInt_variableParserRuleCall_2_0_1());
					}
					lv_val_2_2=ruleInt_variable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrintRule());
						}
						set(
							$current,
							"val",
							lv_val_2_2,
							"org.xtext.first.csvdsl.CsvDsl.Int_variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getPrintAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleLoad
entryRuleLoad returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoadRule()); }
	iv_ruleLoad=ruleLoad
	{ $current=$iv_ruleLoad.current; }
	EOF;

// Rule Load
ruleLoad returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Open'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoadAccess().getOpenKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLoadAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_filename_2_0=RULE_STRING
				{
					newLeafNode(lv_filename_2_0, grammarAccess.getLoadAccess().getFilenameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoadRule());
					}
					setWithLastConsumed(
						$current,
						"filename",
						lv_filename_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getLoadAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSum
entryRuleSum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSumRule()); }
	iv_ruleSum=ruleSum
	{ $current=$iv_ruleSum.current; }
	EOF;

// Rule Sum
ruleSum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSumAccess().getVarInt_variableParserRuleCall_0_0());
				}
				lv_var_0_0=ruleInt_variable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSumRule());
					}
					set(
						$current,
						"var",
						lv_var_0_0,
						"org.xtext.first.csvdsl.CsvDsl.Int_variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getSumAccess().getEqualsSignKeyword_1());
		}
		otherlv_2='Sum'
		{
			newLeafNode(otherlv_2, grammarAccess.getSumAccess().getSumKeyword_2());
		}
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getSumAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSumAccess().getSelectionCsv_variableParserRuleCall_4_0());
				}
				lv_selection_4_0=ruleCsv_variable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSumRule());
					}
					set(
						$current,
						"selection",
						lv_selection_4_0,
						"org.xtext.first.csvdsl.CsvDsl.Csv_variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSumAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleProduct
entryRuleProduct returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProductRule()); }
	iv_ruleProduct=ruleProduct
	{ $current=$iv_ruleProduct.current; }
	EOF;

// Rule Product
ruleProduct returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProductAccess().getVarInt_variableParserRuleCall_0_0());
				}
				lv_var_0_0=ruleInt_variable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProductRule());
					}
					set(
						$current,
						"var",
						lv_var_0_0,
						"org.xtext.first.csvdsl.CsvDsl.Int_variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getProductAccess().getEqualsSignKeyword_1());
		}
		otherlv_2='Product'
		{
			newLeafNode(otherlv_2, grammarAccess.getProductAccess().getProductKeyword_2());
		}
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getProductAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProductAccess().getSelectionCsv_variableParserRuleCall_4_0());
				}
				lv_selection_4_0=ruleCsv_variable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProductRule());
					}
					set(
						$current,
						"selection",
						lv_selection_4_0,
						"org.xtext.first.csvdsl.CsvDsl.Csv_variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getProductAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleDirect
entryRuleDirect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectRule()); }
	iv_ruleDirect=ruleDirect
	{ $current=$iv_ruleDirect.current; }
	EOF;

// Rule Direct
ruleDirect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_INT
			{
				newLeafNode(lv_val_0_0, grammarAccess.getDirectAccess().getValINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDirectRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	iv_ruleSelect=ruleSelect
	{ $current=$iv_ruleSelect.current; }
	EOF;

// Rule Select
ruleSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectAccess().getNewCsvCsv_variableParserRuleCall_0_0());
				}
				lv_newCsv_0_0=ruleCsv_variable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectRule());
					}
					set(
						$current,
						"newCsv",
						lv_newCsv_0_0,
						"org.xtext.first.csvdsl.CsvDsl.Csv_variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getSelectAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectAccess().getCsv_varCsv_variableParserRuleCall_2_0());
				}
				lv_csv_var_2_0=ruleCsv_variable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectRule());
					}
					set(
						$current,
						"csv_var",
						lv_csv_var_2_0,
						"org.xtext.first.csvdsl.CsvDsl.Csv_variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='.select'
		{
			newLeafNode(otherlv_3, grammarAccess.getSelectAccess().getSelectKeyword_3());
		}
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getSelectAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectAccess().getRangeRangeParserRuleCall_5_0());
				}
				lv_range_5_0=ruleRange
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectRule());
					}
					set(
						$current,
						"range",
						lv_range_5_0,
						"org.xtext.first.csvdsl.CsvDsl.Range");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getSelectAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleDrop
entryRuleDrop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDropRule()); }
	iv_ruleDrop=ruleDrop
	{ $current=$iv_ruleDrop.current; }
	EOF;

// Rule Drop
ruleDrop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDropAccess().getNewCsvCsv_variableParserRuleCall_0_0());
				}
				lv_newCsv_0_0=ruleCsv_variable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDropRule());
					}
					set(
						$current,
						"newCsv",
						lv_newCsv_0_0,
						"org.xtext.first.csvdsl.CsvDsl.Csv_variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getDropAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDropAccess().getCsv_varCsv_variableParserRuleCall_2_0());
				}
				lv_csv_var_2_0=ruleCsv_variable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDropRule());
					}
					set(
						$current,
						"csv_var",
						lv_csv_var_2_0,
						"org.xtext.first.csvdsl.CsvDsl.Csv_variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='.drop'
		{
			newLeafNode(otherlv_3, grammarAccess.getDropAccess().getDropKeyword_3());
		}
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getDropAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDropAccess().getRangeRangeParserRuleCall_5_0());
				}
				lv_range_5_0=ruleRange
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDropRule());
					}
					set(
						$current,
						"range",
						lv_range_5_0,
						"org.xtext.first.csvdsl.CsvDsl.Range");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getDropAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	iv_ruleRange=ruleRange
	{ $current=$iv_ruleRange.current; }
	EOF;

// Rule Range
ruleRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRangeAccess().getRowRangeParserRuleCall_0());
		}
		this_RowRange_0=ruleRowRange
		{
			$current = $this_RowRange_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRangeAccess().getColRangeParserRuleCall_1());
		}
		this_ColRange_1=ruleColRange
		{
			$current = $this_ColRange_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRowRange
entryRuleRowRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRowRangeRule()); }
	iv_ruleRowRange=ruleRowRange
	{ $current=$iv_ruleRowRange.current; }
	EOF;

// Rule RowRange
ruleRowRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Row:'
			{
				newLeafNode(otherlv_0, grammarAccess.getRowRangeAccess().getRowKeyword_0_0());
			}
			(
				(
					lv_row_1_0=RULE_INT
					{
						newLeafNode(lv_row_1_0, grammarAccess.getRowRangeAccess().getRowINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRowRangeRule());
						}
						setWithLastConsumed(
							$current,
							"row",
							lv_row_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			otherlv_2='Rows:'
			{
				newLeafNode(otherlv_2, grammarAccess.getRowRangeAccess().getRowsKeyword_1_0());
			}
			(
				(
					lv_rowStart_3_0=RULE_INT
					{
						newLeafNode(lv_rowStart_3_0, grammarAccess.getRowRangeAccess().getRowStartINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRowRangeRule());
						}
						setWithLastConsumed(
							$current,
							"rowStart",
							lv_rowStart_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_4='-'
			{
				newLeafNode(otherlv_4, grammarAccess.getRowRangeAccess().getHyphenMinusKeyword_1_2());
			}
			(
				(
					lv_rowEnd_5_0=RULE_INT
					{
						newLeafNode(lv_rowEnd_5_0, grammarAccess.getRowRangeAccess().getRowEndINTTerminalRuleCall_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRowRangeRule());
						}
						setWithLastConsumed(
							$current,
							"rowEnd",
							lv_rowEnd_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleColRange
entryRuleColRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColRangeRule()); }
	iv_ruleColRange=ruleColRange
	{ $current=$iv_ruleColRange.current; }
	EOF;

// Rule ColRange
ruleColRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Column:'
			{
				newLeafNode(otherlv_0, grammarAccess.getColRangeAccess().getColumnKeyword_0_0());
			}
			(
				(
					lv_column_1_0=RULE_INT
					{
						newLeafNode(lv_column_1_0, grammarAccess.getColRangeAccess().getColumnINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColRangeRule());
						}
						setWithLastConsumed(
							$current,
							"column",
							lv_column_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			otherlv_2='Columns:'
			{
				newLeafNode(otherlv_2, grammarAccess.getColRangeAccess().getColumnsKeyword_1_0());
			}
			(
				(
					lv_columnStart_3_0=RULE_INT
					{
						newLeafNode(lv_columnStart_3_0, grammarAccess.getColRangeAccess().getColumnStartINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColRangeRule());
						}
						setWithLastConsumed(
							$current,
							"columnStart",
							lv_columnStart_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_4='-'
			{
				newLeafNode(otherlv_4, grammarAccess.getColRangeAccess().getHyphenMinusKeyword_1_2());
			}
			(
				(
					lv_columnEnd_5_0=RULE_INT
					{
						newLeafNode(lv_columnEnd_5_0, grammarAccess.getColRangeAccess().getColumnEndINTTerminalRuleCall_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColRangeRule());
						}
						setWithLastConsumed(
							$current,
							"columnEnd",
							lv_columnEnd_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleCsv_variable
entryRuleCsv_variable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCsv_variableRule()); }
	iv_ruleCsv_variable=ruleCsv_variable
	{ $current=$iv_ruleCsv_variable.current; }
	EOF;

// Rule Csv_variable
ruleCsv_variable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getCsv_variableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getCsv_variableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleInt_variable
entryRuleInt_variable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInt_variableRule()); }
	iv_ruleInt_variable=ruleInt_variable
	{ $current=$iv_ruleInt_variable.current; }
	EOF;

// Rule Int_variable
ruleInt_variable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getInt_variableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getInt_variableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
